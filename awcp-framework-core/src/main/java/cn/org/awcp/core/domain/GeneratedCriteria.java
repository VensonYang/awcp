package cn.org.awcp.core.domain;

import java.util.ArrayList;
import java.util.List;

/**
 * This class was generated by MyBatis Generator. This class corresponds to the
 * database table person
 *
 * @mbggenerated Thu Sep 01 10:08:21 CST 2011
 */
public abstract class GeneratedCriteria {
	protected List<Criterion> criteria;

	protected GeneratedCriteria() {
		super();
		criteria = new ArrayList<Criterion>();
	}

	public boolean isValid() {
		return criteria.size() > 0;
	}

	public List<Criterion> getAllCriteria() {
		return criteria;
	}

	public List<Criterion> getCriteria() {
		return criteria;
	}

	public void addCriterion(String condition) {
		if (condition == null) {
			throw new RuntimeException("Value for condition cannot be null");
		}
		criteria.add(new Criterion(condition));
	}

	public void addCriterion(String condition, Object value, String property) {
		if (value == null) {
			throw new RuntimeException("Value for " + property + " cannot be null");
		}
		criteria.add(new Criterion(condition, value));
	}

	public void addCriterion(String condition, Object value1, Object value2, String property) {
		if (value1 == null || value2 == null) {
			throw new RuntimeException("Between values for " + property + " cannot be null");
		}
		criteria.add(new Criterion(condition, value1, value2));
	}

	public Criteria andIsNull(String prop) {
		addCriterion(prop + " is null");
		return (Criteria) this;
	}

	public Criteria andIsNotNull(String prop) {
		addCriterion(prop + " is not null");
		return (Criteria) this;
	}

	public Criteria andEqualTo(String prop, Object value) {
		addCriterion(prop + " =", value, prop);
		return (Criteria) this;
	}

	public Criteria andNotEqualTo(String prop, Integer value) {
		addCriterion(prop + " <>", value, prop);
		return (Criteria) this;
	}

	public Criteria andGreaterThan(String prop, Integer value) {
		addCriterion(prop + " >", value, prop);
		return (Criteria) this;
	}

	public Criteria andGreaterThanOrEqualTo(String prop, Integer value) {
		addCriterion(prop + " >=", value, prop);
		return (Criteria) this;
	}

	public Criteria andLessThan(String prop, Integer value) {
		addCriterion(prop + " <", value, prop);
		return (Criteria) this;
	}

	public Criteria andLessThanOrEqualTo(String prop, Integer value) {
		addCriterion(prop + " <=", value, prop);
		return (Criteria) this;
	}

	public Criteria andIn(String prop, List<Integer> values) {
		addCriterion(prop + " in", values, prop);
		return (Criteria) this;
	}

	/**
	 * ljw
	 * 
	 * @param prop
	 * @param values
	 *            参数为Long类型
	 * @return
	 */
	public Criteria andInLong(String prop, List<Long> values) {
		addCriterion(prop + " in", values, prop);
		return (Criteria) this;
	}

	/**
	 * ljw
	 * 
	 * @param prop
	 * @param values
	 *            参数为String
	 * @return
	 */
	public Criteria andInStr(String prop, List<String> values) {
		addCriterion(prop + " in", values, prop);
		return (Criteria) this;
	}

	public Criteria andNotIn(String prop, List<Integer> values) {
		addCriterion(prop + " not in", values, prop);
		return (Criteria) this;
	}

	/**
	 * ljw
	 * 
	 * @param prop
	 * @param values
	 *            参数为Long
	 * @return
	 */
	public Criteria andNotInLong(String prop, List<Long> values) {
		addCriterion(prop + " not in", values, prop);
		return (Criteria) this;
	}

	/**
	 * ljw
	 * 
	 * @param prop
	 * @param values
	 *            参数为String
	 * @return
	 */
	public Criteria andNotInStr(String prop, List<String> values) {
		addCriterion(prop + " not in", values, prop);
		return (Criteria) this;
	}

	public Criteria andBetween(String prop, Integer value1, Integer value2) {
		addCriterion(prop + " between", value1, value2, prop);
		return (Criteria) this;
	}

	public Criteria andNotBetween(String prop, Integer value1, Integer value2) {
		addCriterion(prop + " not between", value1, value2, prop);
		return (Criteria) this;
	}

	public Criteria andLike(String prop, String value) {
		addCriterion(prop + " like", value, prop);
		return (Criteria) this;
	}

	public Criteria andNotLike(String prop, String value) {
		addCriterion(prop + " not like", value, prop);
		return (Criteria) this;
	}

}
